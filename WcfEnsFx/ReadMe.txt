直接使用最基本的双向通信机制来完成事件处理有很多问题：
最主要的原因是注册者和发布者之间有太多耦合；
首先注册者需要知道系统内的所有事件发布者，并与它们连接。另外也没有很好的机制能够让注册者去注册系统中的某个特殊类型的事件。还有注册者和各个发布者之间的交互也非常麻烦。
其次，发布者只能将事件发布给自己认识的注册者，也没有直接的广播机制将事件发布给任何对事件感兴趣的监听者。所有发布者都需要维护注册者列表并实现发布机制，而这部分的代码和业务逻辑没有任何直接关系；如果想要实现高级功能（如事件的并行发布），这部分的代码会变得非常复杂。
另外，双向通信的回掉机制会在发布者和注册者的整个生命周期内产生耦合；注册者需要始终保持激活状态才能成功的注册并接收事件。
注册者和发布者都要实现比较复杂的安全机制。最后，每个事件的注册机制都只能采用程序的方式实现，用配置来实现难度太大。
以上这些问题并非仅仅存在于WCF的双向通信机制中，早期的技术，如COM链接点、.Net的代理等都是基于对象实例的紧密耦合的事件管理机制。



